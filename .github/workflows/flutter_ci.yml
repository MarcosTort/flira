# .github/workflows/ai-code-review-macos.yml
name: 🤖 AI Code Review (macOS)

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ai-review-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: 1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPO_NAME: ${{ github.repository }}
  PR_NUMBER: ${{ github.event.pull_request.number }}
  HEAD_SHA: ${{ github.event.pull_request.head.sha }}
  BASE_SHA: ${{ github.event.pull_request.base.sha }}
  LMSTUDIO_API_URL: ${{ vars.LMSTUDIO_API_URL || 'http://127.0.0.1:8080' }}
  # macOS specific
  AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/../hostedtoolcache
  RUNNER_TOOL_CACHE: ${{ github.workspace }}/../hostedtoolcache

jobs:
  ai-code-review:
    name: 🤖 AI Code Review
    runs-on: self-hosted
    timeout-minutes: 30
    
    if: >
      github.event.pull_request.draft == false &&
      !contains(github.event.pull_request.user.login, 'bot')
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      
      # SKIP actions/setup-python - use system Python instead  
      - name: 🐍 Use System Python (macOS Fix)
        run: |
          echo "🍎 Using system Python to avoid permission issues..."
          
          # Find best available Python
          if command -v python3.9 &> /dev/null; then
            PYTHON_CMD=python3.9
          elif command -v python3 &> /dev/null; then
            PYTHON_CMD=python3
          else
            echo "❌ No Python 3 found"
            exit 1
          fi
          
          echo "🐍 Using: $PYTHON_CMD"
          $PYTHON_CMD --version
          
          # Create tool cache directory with proper permissions
          TOOL_CACHE="${{ github.workspace }}/../hostedtoolcache"
          mkdir -p "$TOOL_CACHE"
          chmod 755 "$TOOL_CACHE"
          
          echo "🔧 Tool cache: $TOOL_CACHE"
          echo "✅ Python environment ready"
      
      - name: 📦 Install Dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          
          # Use the best available Python
          if command -v python3.9 &> /dev/null; then
            PYTHON_CMD=python3.9
          elif command -v python3 &> /dev/null; then
            PYTHON_CMD=python3
          else
            exit 1
          fi
          
          # Upgrade pip
          $PYTHON_CMD -m pip install --upgrade pip --user
          
          # Install requirements
          if [ -f "requirements.txt" ]; then
            $PYTHON_CMD -m pip install -r requirements.txt --user
          else
            # Install minimal dependencies
            $PYTHON_CMD -m pip install --user \
              PyGithub==1.59.1 \
              requests==2.31.0 \
              aiohttp==3.9.1 \
              psutil==5.9.6
          fi
          
          echo "✅ Dependencies installed"
      
      - name: 🏃 Check Runner Environment
        run: |
          echo "🍎 macOS Runner Environment:"
          echo "User: $(whoami)"
          echo "Home: $HOME"
          echo "Working Directory: $(pwd)"
          echo "Python: $(which python3)"
          echo "Python version: $(python3 --version)"
          echo "Architecture: $(uname -m)"
          echo "System: $(sw_vers -productName) $(sw_vers -productVersion)"
          echo "Memory: $(system_profiler SPHardwareDataType | grep "Memory:" | awk '{print $2, $3}')"
          echo "Disk space: $(df -h / | tail -1 | awk '{print $4}') available"
      
      - name: 🔌 Verify LM Studio
        run: |
          echo "🔌 Checking LM Studio connection..."
          
          # Test with both localhost and 127.0.0.1
          URLS=("${LMSTUDIO_API_URL}" "http://localhost:8080" "http://127.0.0.1:8080")
          
          for url in "${URLS[@]}"; do
            echo "Testing: $url"
            if curl -f -s "$url/v1/models" &> /dev/null; then
              echo "✅ LM Studio responding at: $url"
              export LMSTUDIO_API_URL="$url"
              break
            fi
          done
          
          # Final test
          if curl -f -s "${LMSTUDIO_API_URL}/v1/models" &> /dev/null; then
            echo "✅ LM Studio is ready!"
            echo "📊 Models available:"
            curl -s "${LMSTUDIO_API_URL}/v1/models" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    models = data.get('data', [])
    print(f'  Count: {len(models)}')
    for model in models[:2]:
        print(f'  - {model.get(\"id\", \"unknown\")}')
except:
    print('  Could not parse model info')
" 2>/dev/null || echo "  Model info not available"
          else
            echo "❌ LM Studio not responding"
            echo "💡 macOS Setup:"
            echo "  1. Open LM Studio app"
            echo "  2. Load a model (Code Llama, etc.)"
            echo "  3. Go to Local Server tab"
            echo "  4. Start the server on port 8080"
            exit 1
          fi
      
      - name: 🤖 Run AI Code Review
        run: |
          echo "🚀 Starting AI Code Review..."
          
          # Use the best available Python
          if command -v python3.9 &> /dev/null; then
            PYTHON_CMD=python3.9
          elif command -v python3 &> /dev/null; then
            PYTHON_CMD=python3
          else
            exit 1
          fi
          
          # Set up directories
          export CACHE_DIR="$HOME/ai_review_cache"
          export LOG_DIR="$HOME/ai_review_logs"
          mkdir -p "$CACHE_DIR" "$LOG_DIR"
          
          echo "📂 Cache: $CACHE_DIR"
          echo "📂 Logs: $LOG_DIR"
          
          # Find and run the review script
          SCRIPT_FOUND=false
          
          for script in "scripts/runner_optimized_ai_review.py" \
                        "scripts/enhanced_local_ai_review.py" \
                        "scripts/local_ai_review.py"; do
            if [ -f "$script" ]; then
              echo "🎯 Running: $script"
              $PYTHON_CMD "$script"
              SCRIPT_FOUND=true
              break
            fi
          done
          
          if [ "$SCRIPT_FOUND" = false ]; then
            echo "❌ No AI review script found!"
            echo "Available Python files:"
            find . -name "*.py" -path "*/scripts/*" | head -10
            exit 1
          fi
          
          echo "✅ AI Code Review completed"
        timeout-minutes: 25
      
      - name: 📊 Results Summary
        if: always()
        run: |
          echo "📊 macOS Review Summary:"
          echo "========================================"
          
          # System stats
          echo "🍎 System Status:"
          echo "Memory pressure: $(memory_pressure 2>/dev/null | head -1 || echo 'normal')"
          echo "Disk usage: $(df -h / | tail -1 | awk '{print $5}')"
          echo "Load: $(uptime | sed 's/.*load averages: //')"
          
          # Cache stats
          if [ -d "$HOME/ai_review_cache" ]; then
            echo ""
            echo "💾 Cache Status:"
            echo "Size: $(du -sh "$HOME/ai_review_cache" 2>/dev/null | cut -f1)"
            echo "Files: $(find "$HOME/ai_review_cache" -name "*.json" 2>/dev/null | wc -l | xargs)"
          fi
          
          # Log summary
          if [ -d "$HOME/ai_review_logs" ]; then
            echo ""
            echo "📝 Logs:"
            find "$HOME/ai_review_logs" -name "*.log" -exec echo "  - {}" \; 2>/dev/null | head -3
          fi
      
      - name: 📁 Manual Log Archive
        if: always()
        run: |
          echo "📁 Creating manual log archive..."
          
          LOG_DIR="$HOME/ai_review_logs"
          ARCHIVE_NAME="ai-review-logs-pr-${{ github.event.pull_request.number }}-$(date +%Y%m%d-%H%M%S).tar.gz"
          
          if [ -d "$LOG_DIR" ] && [ "$(ls -A "$LOG_DIR" 2>/dev/null)" ]; then
            cd "$HOME"
            tar -czf "$ARCHIVE_NAME" ai_review_logs/ 2>/dev/null || true
            
            if [ -f "$ARCHIVE_NAME" ]; then
              echo "✅ Logs archived: $ARCHIVE_NAME"
              echo "📊 Archive size: $(ls -lh "$ARCHIVE_NAME" | awk '{print $5}')"
              
              # Move to workspace for potential access
              mv "$ARCHIVE_NAME" "${{ github.workspace }}/" 2>/dev/null || true
            else
              echo "⚠️ Failed to create archive"
            fi
          else
            echo "ℹ️ No logs found to archive"
          fi
      
      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          
          # Remove temporary files
          find /tmp -name "*ai_review*" -user $(whoami) -delete 2>/dev/null || true
          
          # Clean old cache entries (keep recent ones)
          CACHE_DIR="$HOME/ai_review_cache"
          if [ -d "$CACHE_DIR" ]; then
            # Remove entries older than 7 days
            find "$CACHE_DIR" -name "*.json" -mtime +7 -delete 2>/dev/null || true
            echo "🗄️ Cache cleaned (kept recent entries)"
          fi
          
          # Show final status
          echo